server:
  address: 0.0.0.0
  port: 8101
  servlet:
    context-path: /api
    # cookie 30 天过期
    session:
      cookie:
        max-age: 2592000
spring:
  # 数据库配置
  datasource:
    # 数据库驱动的类名，MySQL 8 及以上版本使用 com.mysql.cj.jdbc.Driver
    driver-class-name: com.mysql.cj.jdbc.Driver
    # 数据库连接 URL，指定了数据库地址、端口和数据库名
    url: jdbc:mysql://localhost:3306/my_test_db
    # 数据库用户名，用于连接数据库
    username: root
    # 数据库密码，用于连接数据库（密码必须包含大小写字母、数字和特殊字符，并且长度不低于 8 位）
    password: Complex@135
  # SQL 文件初始化配置
  sql:
    init:
      # schema.sql 文件位置，定义数据库表结构的 SQL 文件
      schema-locations: classpath:sql/schema.sql
      # data.sql 文件位置，插入初始数据的 SQL 文件
      data-locations: classpath:sql/data.sql
      # SQL 初始化模式
      # always 表示每次应用启动时都加载 SQL 文件
      # embedded 表示只在嵌入式数据库（如 H2）时才加载 SQL 文件
      mode: always
      platform: mysql
      username: root
      password: Complex@135
mybatis-plus:
  configuration:
    # 是否将数据库字段的下划线命名风格自动映射为驼峰命名法
    # 例如：数据库字段 `user_name` 会映射为实体类中的 `userName` 属性
    # 设置为 false 则不会自动转换，需要手动映射字段
    map-underscore-to-camel-case: false

    # 配置 MyBatis 日志实现类，用于输出执行的 SQL 和调试信息
    # 使用 `org.apache.ibatis.logging.stdout.StdOutImpl` 将日志输出到控制台
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

  global-config:
    db-config:
      # 全局逻辑删除字段名称（对应实体类中的字段名）
      # 例如：在实体类中设置 `private Integer isDelete`，MyBatis-Plus 会使用该字段来标记逻辑删除
      logic-delete-field: isDelete

      # 标记逻辑删除的数据的值（默认为 1 表示已删除）
      # 当执行删除操作时，SQL 中会自动将逻辑删除字段的值更新为此配置值，而不是直接物理删除记录
      logic-delete-value: 1

      # 标记逻辑未删除的数据的值（默认为 0 表示未删除）
      # 当查询时，SQL 会自动过滤出逻辑未删除的数据（即逻辑删除字段的值等于该配置值的数据）
      logic-not-delete-value: 0